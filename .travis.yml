language: go

go:
- 1.12.x

# for mongo replica setup
node_js:
  - "0.11"
  - "0.10"

# Only clone the most recent commit.
git:
  depth: 1

# Get (and start) mongodb for unit tests
services:
  - mongodb


before_script:
  # Install golangci-lint
  - curl -sfL https://install.goreleaser.com/github.com/golangci/golangci-lint.sh | bash -s -- -b $GOPATH/bin v1.20.1

  # Get a mongodb with replica set stood up
  # Found the following at https://github.com/bottlepy/bottle-mongo/blob/5f359898fb81b9168b79a0c8fb60bbe892763d51/.travis.yml
  # # Set up a shared authentication key
  # - openssl rand -base64 741 | sudo tee /etc/mongodb.authkey
  # - sudo chown mongodb  /etc/mongodb.authkey
  # - sudo chmod 600 /etc/mongodb.authkey
  # Begin modification of the default mongoDB instance
  - echo "replSet = testReplSet" | sudo tee -a /etc/mongodb.conf
  - echo "oplogSize = 250" | sudo tee -a /etc/mongodb.conf
  - echo "nojournal = true" | sudo tee -a /etc/mongodb.conf
  # - echo "keyFile = /etc/mongodb.authkey" | sudo tee -a /etc/mongodb.conf

  # Wipe out the data directory so we are clean with our configuration
  - sudo rm -rf /var/lib/mongodb/*

  # Start up the service using the normal init script
  - sudo cat /etc/mongodb.conf
  - sudo service mongodb start || { cat /var/log/mongodb/mongodb.log; exit 1; }

  # Just wait until we are sure it is up
  - bash -c "while true; do mongo --quiet --port 27017 --eval 'if (!db.stats().ok) { quit(1) }' || { sleep 2; continue; } && break; done;"

  - sudo cp /etc/mongodb.conf /etc/mongodb2.conf
  - echo "logpath = /tmp/mongodb.log" | sudo tee -a /etc/mongodb.conf
  - echo "port = 27018" | sudo tee -a /etc/mongodb2.conf
  - sudo sed -i 's,/var/lib/mongodb,/var/lib/mongodb2,' /etc/mongodb2.conf

  # Create the data directory for the secondary
  - sudo mkdir /var/lib/mongodb2
  - sudo chown mongodb /var/lib/mongodb2

  # Start the secondary instance using the plain mongod command
  - sudo cat /etc/mongodb2.conf
  - sudo -u mongodb mongod --fork --config /etc/mongodb2.conf --logpath /tmp/mongodb2.log || { cat /tmp/mongodb2.log; exit 1; }

  # Wait for the secondary to start up
  - bash -c "while true; do mongo --quiet --port 27018 --eval 'if (!db.stats().ok) { quit(1) }' || { sleep 2; continue; } && break; done;"

  # Create the replicaSet and then wait for it to become clean with a primary and secondary
  - mongo --quiet --port 27017 .travis/rs_create.js || { cat /var/log/mongodb/mongodb.log; cat /tmp/mongodb2.log; exit 1; }

script:
  - GO111MODULE=on go mod vendor
  - golangci-lint run -v    # run a bunch of code checkers/linters in parallel
  - go test -v -race -coverprofile=coverage.txt -covermode=atomic ./...  # Run all the tests with the race detector enabled

after_success:
  - bash <(curl -s https://codecov.io/bash)